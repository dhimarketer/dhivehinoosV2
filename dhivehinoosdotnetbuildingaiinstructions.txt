 

    Domain: dhivehinoos.net
    Goal: A self-hosted news site that receives AI-generated articles (text + image) from n8n, displays them in a modern 3-column layout with ads, supports moderated comments and IP-based voting, and includes a Chakra UI admin dashboard. 
     

 
🏗️ 1. Technical Stack 
Backend
	
Django 5 + Django REST Framework (DRF)
Frontend
	
React 18 + Vite +
Chakra UI
Database
	
SQLite3
(production-ready for low-write use case)
Caching
	
Redis (reuse existing instance on Linode, DB index
3
)
Deployment
	
Docker Compose (isolated, persistent volumes)
Web Server
	
Apache (reverse proxy + static/media serving)
Admin Auth
	
Django session-based login (custom UI, not Django Admin)
SEO
	
React Helmet + Open Graph + canonical URLs
Analytics
	
Google Analytics 4 (GA4)
 
 
 
📁 2. Directory Structure (Linode) 

All files live under /opt/dhivehinoos/: 
bash
 
 
1
2
3
4
5
6
7
8
9
10
11
12
/opt/dhivehinoos/
├── docker-compose.production.yml
├── database/
│   └── db.sqlite3                 # Persistent SQLite DB
├── media/
│   ├── articles/                  # Article images (from n8n)
│   └── ads/                       # Ad banners
├── static/                        # Collected static files (Django)
├── logs/                          # Optional app logs
├── backend/                       # (Optional) Django source for local builds
└── frontend/
    └── dist/                      # React production build (served by Apache)
 
 
 
🐳 3. Docker Compose (docker-compose.production.yml) 
yaml
 
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
⌄
⌄
⌄
⌄
⌄
⌄
⌄
⌄
version: '3.8'

services:
  web:
    image: dhivehinoos/dhivehinoos-backend:latest
    ports:
      - "8006:8000"  # Unique port (not used by other sites)
    volumes:
      - ./database:/app/database
      - ./media/articles:/app/media/articles
      - ./media/ads:/app/media/ads
      - ./static:/app/static
      - ./logs:/app/logs
    environment:
      - DJANGO_SETTINGS_MODULE=dhivehinoos_backend.settings
      - DEBUG=False
      - ALLOWED_HOSTS=dhivehinoos.net,www.dhivehinoos.net
      - DATABASE_URL=sqlite:////app/database/db.sqlite3
      - REDIS_URL=redis://host.docker.internal:6379/3
      - SECRET_KEY=your_strong_secret_key_here
      - API_INGEST_KEY=your_n8n_api_key_here
    restart: unless-stopped
    networks:
      - dhivehinoos_network

networks:
  dhivehinoos_network:
    driver: bridge
 
 

    ✅ Permissions: After first run, run:
    chown -R 1000:1000 /opt/dhivehinoos/database
    chmod -R 755 /opt/dhivehinoos/database 
     

 
🔌 4. n8n Integration 
Endpoint 

POST https://dhivehinoos.net/api/v1/articles/ingest/ 
Headers 
http
 
 
1
2
X-API-Key: <value_of_API_INGEST_KEY>
Content-Type: application/json
 
 
Request Body 
json
 
 
1
2
3
4
5
⌄
{
  "title": "ރައްޔިތުން ހުރިހާ އެސީ",
  "content": "<p>Full HTML article content...</p>",
  "image_url": "https://v3.fal.media/files/kangaroo/Wcq5TTjZT-BS7mz45vaa7.jpeg"
}
 
 
Behavior 

    Save as draft (status = 'draft')
    Download image from image_url, save to media/articles/
    Validate image type (JPEG/PNG/WebP), max 5 MB
    Return 201 Created with article ID
     

 
🗂️ 5. Django Models 
python
 
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
# Article
- title (CharField, max_length=255)
- slug (SlugField, unique)
- content (TextField)  # HTML allowed
- image (ImageField, upload_to='articles/')
- status (CharField, choices: 'draft', 'published', default='draft')
- created_at (DateTimeField, auto_now_add=True)

# Comment
- article (ForeignKey to Article)
- author_name (CharField, blank=True)
- content (TextField)
- ip_address (GenericIPAddressField)
- is_approved (BooleanField, default=False)
- created_at (DateTimeField, auto_now_add=True)

# Vote
- article (ForeignKey to Article)
- ip_address (GenericIPAddressField)
- vote_type (CharField, choices: 'up', 'down')
- created_at (DateTimeField, auto_now_add=True)

# Ad
- title (CharField, max_length=100)
- image (ImageField, upload_to='ads/')
- destination_url (URLField)
- is_active (BooleanField, default=True)
- created_at (DateTimeField, auto_now_add=True)

# ContactMessage
- name (CharField, blank=True)
- email (EmailField, blank=True)
- message (TextField)
- is_read (BooleanField, default=False)
- created_at (DateTimeField, auto_now_add=True)
 
 
 
🖥️ 6. Frontend Pages (React + Chakra UI) 
Public Routes 

    / → Homepage: 3-column responsive grid of published articles  
        Ad slots:  
            Top banner (full-width)  
            After every 3rd article card
             
         
    /article/:slug → Article Detail  
        Full content + image  
        Upvote / Downvote buttons (show net score)  
        Comments section (only approved)  
        Comment form (name optional)
         
    /contact → Get in Touch form (name, email optional; message required)
     

Admin Routes (/admin/*) 

    /admin/login → Login form (username + password)  
    /admin/dashboard → Sidebar with:  
        Articles: List (filter by status), edit (rich text), publish  
        Ads: Upload image + URL, toggle active, preview  
        Messages: List contact submissions, mark as read  
        Comments: Approve/reject pending (first-time commenters)
         
     

    ✅ Use Chakra UI for all components (Button, Card, Input, etc.)
    ✅ Responsive design (mobile-first) 
     

 
🔐 7. Key Logic Rules 
Comments 

    On submit, get client IP
    If no prior comment from this IP → is_approved = False (pending)
    Else → is_approved = True (auto-approved)
     

Voting 

    Store vote with ip_address
    Prevent duplicate votes per IP per article
    Display: upvotes - downvotes
     

Admin Auth 

    Use Django’s built-in auth (django.contrib.auth)
    Session-based (CSRF protected)
    No public user accounts
     

 
🌐 8. Apache Virtual Host 
apache
 
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
<VirtualHost *:80>
    ServerName dhivehinoos.net
    ServerAlias www.dhivehinoos.net

    ProxyPass /api/ http://127.0.0.1:8006/api/
    ProxyPassReverse /api/ http://127.0.0.1:8006/api/

    Alias /media/ /opt/dhivehinoos/media/
    <Directory /opt/dhivehinoos/media/>
        Require all granted
    </Directory>

    DocumentRoot /opt/dhivehinoos/frontend/dist
    <Directory /opt/dhivehinoos/frontend/dist>
        Options -Indexes
        Require all granted
        RewriteEngine On
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule ^(.*)$ /index.html [QSA,L]
    </Directory>
</VirtualHost>
 
 

Enable with: 
bash
 
 
1
2
sudo a2ensite dhivehinoos.net.conf
sudo systemctl reload apache2
 
 
 
🧠 9. SEO & Analytics 
SEO (via React Helmet) 

    <title>, <meta name="description">
    Open Graph: og:title, og:description, og:image
    Canonical URL
     

Google Analytics 4 

    Inject GA4 tag in index.html or root React component
    Track: page views, ad clicks, contact form submissions
     

 
🧪 10. Deliverables (What to Build) 
Phase 1: Backend (Django) 

    models.py (as above)
    DRF serializers + views for:
        /api/v1/articles/ingest/ (token auth)
        Public article list/detail
        Comment/Vote/Contact endpoints
        Admin CRUD (session auth)
         
    settings.py configured for SQLite, Redis, production
    Image downloader utility
     

Phase 2: Frontend (React + Chakra) 

    Homepage grid (3 columns + ad slots)
    Article detail page
    Contact form
    Admin login + dashboard (Articles, Ads, Messages, Comments)
    Rich text editor in admin (Tiptap or simple textarea)
     

Phase 3: DevOps 

    Dockerfile for Django
    docker-compose.production.yml
    Apache config
    n8n webhook setup guide
     

 
✅ Assumptions & Constraints 

    Traffic: Low (SQLite sufficient)
    Writes: Only n8n writes articles; users only comment/vote
    Backups: Handled by Linode (no app-level backup needed)
    Security: API key protected; admin login required for dashboard
    Design: Clean, modern Maldivian news style (like mihaaru.com)
     

 
▶️ Next Action for AI Agent 

Begin by generating: 

    Django models.py and settings.py
    DRF view for n8n article ingestion
    React homepage component with Chakra UI grid + ad slots
     

This spec contains everything needed to build the full system. 
